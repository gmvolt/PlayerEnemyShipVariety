name: 무작위 리뷰어 할당

on:
  workflow_run:
    workflows: ["테스트 실행 및 빌드"] # run-tests 워크플로우 이름
    types:
      - completed

jobs:
  assign-reviewers:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # 성공 시에만 실행
    runs-on: ubuntu-latest
    
    steps:
      - name: Set up GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh
      - name: Select Random Reviewers
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          # PR 제목 가져오기
          PR_TITLE=$(jq --raw-output .pull_request.title "$GITHUB_EVENT_PATH")
          echo "PR 제목: $PR_TITLE"

          # PR 링크 가져오기
          PR_LINK=$(jq --raw-output .pull_request.html_url "$GITHUB_EVENT_PATH")
          echo "PR 링크: $PR_LINK"
          
          # 디스코드 웹훅 URL 확인
          if [[ -z "$WEBHOOK_URL" ]]; then
            echo "ERROR: DISCORD_WEBHOOK URL이 설정되지 않았습니다."
            exit 1
          fi
          
          # 2명의 조원 GitHub 아이디를 배열에 저장
          REVIEWERS=("gmvolt" "gmvolt2")
          
          # 디스코드 ID 매핑
          declare -A DISCORD_IDS
          DISCORD_IDS["gmvolt"]="337576501216018442"
          DISCORD_IDS["gmvolt2"]="669355576731631635"
          
          # PR 작성자 아이디 가져오기
          PR_AUTHOR=$(jq --raw-output .pull_request.user.login "$GITHUB_EVENT_PATH")
          
          # PR 작성자를 제외한 배열 생성
          FILTERED_REVIEWERS=()
          for reviewer in "${REVIEWERS[@]}"; do
            if [[ "$reviewer" != "$PR_AUTHOR" ]]; then
              FILTERED_REVIEWERS+=("$reviewer")
            fi
          done
          # PR 제목에서 '#M' 패턴 찾기
          if [[ "$PR_TITLE" =~ \#M$ ]]; then
            exit 0  # 워크플로우 종료 (자동 리뷰어 할당을 하지 않음)
          fi
          # PR 제목에서 '#n' 패턴 찾기
          if [[ "$PR_TITLE" =~ \#([0-9]+)$ ]]; then
            NUM_REVIEWERS=${BASH_REMATCH[1]}
            echo "지정된 리뷰어 수: $NUM_REVIEWERS"
          else
            NUM_REVIEWERS=1
            echo "리뷰어 수가 명시되지 않았으므로 기본값 $NUM_REVIEWERS명을 선택합니다."
          fi
          # 배열에서 n명을 무작위로 선택
          SELECTED_REVIEWERS=($(shuf -e "${FILTERED_REVIEWERS[@]}" -n "$NUM_REVIEWERS"))
          
          echo "선택된 리뷰어: ${SELECTED_REVIEWERS[@]}"
          
          # 선택된 리뷰어의 디스코드 ID 가져오기
          SELECTED_DISCORD_IDS=()
          for reviewer in "${SELECTED_REVIEWERS[@]}"; do
            SELECTED_DISCORD_IDS+=("${DISCORD_IDS[$reviewer]}")
          done

          # 디스코드 맨션 메시지 생성
          DISCORD_MENTIONS=""
          for id in "${SELECTED_DISCORD_IDS[@]}"; do
            DISCORD_MENTIONS+="<@$id> "
          done
          MESSAGE="리뷰어로 지정되었습니다: ${DISCORD_MENTIONS}!\nPR 제목: $PR_TITLE\nPR 링크: $PR_LINK"
          
          # 디스코드 웹훅으로 메시지 전송
          curl -H "Content-Type: application/json" \
               -d "{\"content\": \"$MESSAGE\"}" \
               $WEBHOOK_URL
          
          # 선택된 리뷰어를 GitHub API 형식에 맞춰 JSON 배열로 변환
          JSON_REVIEWERS=$(printf '%s\n' "${SELECTED_REVIEWERS[@]}" | jq -R . | jq -s .)
          
          echo "리뷰어 JSON: $JSON_REVIEWERS"
          
          # PR 번호 가져오기
          PR_NUMBER=$(jq --raw-output .number "$GITHUB_EVENT_PATH")
          
          # GitHub API를 통해 PR에 리뷰어 지정
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/requested_reviewers" \
            -d "{\"reviewers\": $JSON_REVIEWERS}"
