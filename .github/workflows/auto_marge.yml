name: 승인 조건 충족 시 PR 자동 병합

on:
  pull_request_review:
    types: [submitted]  # 리뷰가 제출될 때 워크플로우 트리거

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.base_ref != 'master'  # master 브랜치가 아닌 경우에만 워크플로우 실행

    steps:
      - name: Set up GitHub CLI
        # GitHub CLI 및 jq 설치 준비 단계
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh  # JSON 파싱과 GitHub CLI 사용을 위한 jq와 gh 설치

      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Install jq
        # jq 설치 (JSON 파싱 도구)
        run: sudo apt-get install -y jq

      - name: PR 승인 상태 확인
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # PR 번호 가져오기
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            PR_NUMBER=$(jq --raw-output .number "$GITHUB_EVENT_PATH")
          elif [[ "$GITHUB_EVENT_NAME" == "pull_request_review" ]]; then
            PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          else
            echo "지원되지 않는 이벤트 타입입니다: $GITHUB_EVENT_NAME"
            exit 1
          fi
      
          echo "PR 번호: $PR_NUMBER"
      
          # 리뷰 상태 가져오기
          REVIEWS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews")
      
          echo "리뷰 상태 확인: $REVIEWS"
      
          # 리뷰어 목록과 각 리뷰어의 최신 리뷰 상태 확인
          APPROVED_COUNT=$(echo "$REVIEWS" | jq '[group_by(.user.login)[] | max_by(.submitted_at) | select(.state == "APPROVED")] | length')
      
          echo "승인된 리뷰어 수: $APPROVED_COUNT"
      
          # PR에 실제 요청된 리뷰어 수 확인 (승인 대기자를 기준으로 하지 않음)
          REVIEWERS_COUNT=$(echo "$REVIEWS" | jq '[group_by(.user.login)[]] | length')
      
          echo "전체 리뷰어 수: $REVIEWERS_COUNT"
      
          # 필요한 승인 수는 리뷰어 전체 수로 설정
          if [ "$APPROVED_COUNT" -ge "$REVIEWERS_COUNT" ]; then
            echo "모든 승인 조건을 충족했습니다."
            echo "approved=true" >> $GITHUB_ENV
          else
            echo "승인 조건을 충족하지 못했습니다."
            echo "approved=false" >> $GITHUB_ENV
          fi
      - name: Merge the Pull Request
        if: env.approved == 'true' && github.base_ref != 'master'  # 승인 조건 충족 및 master 브랜치가 아닐 때만 실행
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub API 접근을 위한 토큰 설정
        run: |
          # PR 번호를 다시 가져오기 (머지 단계)
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          # GitHub API를 사용해 PR을 자동 머지
          curl -X PUT -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge" \
               -d '{"merge_method":"merge"}'
          # merge_method는 기본 merge 방식으로 설정
